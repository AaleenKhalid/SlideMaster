import json
import re
import logging

logger = logging.getLogger(__name__)

class VerificationService:
    """
    Verifies the markdown content generated by the LLM.
    Performs some basic fact-checking
    """
    def __init__(self):
        # Some common misleading statements
        self.misleading_patterns = [
            r"everyone knows that",
            r"studies show that .{1,30} 100%",
            r"scientists all agree",
            r"it is proven that",
            r"research conclusively demonstrates",
            r"undeniable proof",
            r"without a doubt"
        ]


    def verify_markdown(self, markdown_content):
        """
        Perform basic verification on generated markdown.

        :param markdown_content: Generated markdown text
        :return: Verified markdown or raises ValueError
        """
        if not isinstance(markdown_content, str):
            markdown_content = str(markdown_content)

        if not markdown_content:
            raise ValueError("No content generated")

        if len(markdown_content) < 50:
            raise ValueError("Generated Content too short")

        if len(markdown_content) < 10:  # Minimum content length
            raise ValueError("Generated content is too short")

        # verifying the structure of the generated content
        self.verify_structure(markdown_content)

        # TODO - need to do fact check here

        return markdown_content


    def verify_structure(self, markdown_content):
        """
        To verify structure of the markdown content.
        Checking stuff like, headings, the number of sections and format of the main content

        :param content: Markdown content
        :raises ValueError: If structure verification fails
        """
        # Check the headings
        if not re.search(r'^#\s+\w+', markdown_content, re.MULTILINE):
            raise ValueError("Missing the main headers in the content")

        section_count = len(re.findall(r'^#{1,3}\s+\w+', markdown_content, re.MULTILINE))
        if section_count < 5:
            raise ValueError("Content should have multiple sections")

        # Check format of the main content
        if not re.search(r'^\s*[-*]\s+\w+', markdown_content, re.MULTILINE):
            raise ValueError("Content should have bullet points")


    def fact_check(self, markdown_content):
        # TODO 1.Extract key facts from the generated markdown
        # TODO 2.Use API to search valid sources
        # TODO 3.Extract relevant results from the API response
        # TODO 4.Compare the responses -> check their similarity


